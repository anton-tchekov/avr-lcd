
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000292  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd9  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000879  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000811  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000887  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 24 01 	call	0x248	; 0x248 <main>
  8e:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_enable>:
#include "lcd.h"

static void lcd_enable(void)
{
	LCD_OUT |= (1 << LCD_EN);
  96:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	8a e6       	ldi	r24, 0x6A	; 106
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_enable+0x4>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_enable+0xa>
	LCD_DELAY_US(LCD_DELAY_US_ENABLE);
	LCD_OUT &= ~(1 << LCD_EN);
  a0:	45 98       	cbi	0x08, 5	; 8
}
  a2:	08 95       	ret

000000a4 <lcd_out>:

static void lcd_out(uint8_t data)
{
	data &= 0xF0;
	LCD_OUT &= ~(0xF0 >> (4 - LCD_DB));
  a4:	98 b1       	in	r25, 0x08	; 8
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	98 b9       	out	0x08, r25	; 8
	LCD_OUT |= (data >> (4 - LCD_DB));
  aa:	98 b1       	in	r25, 0x08	; 8
  ac:	82 95       	swap	r24
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	88 b9       	out	0x08, r24	; 8
	lcd_enable();
  b4:	0c 94 4b 00 	jmp	0x96	; 0x96 <lcd_enable>

000000b8 <lcd_data>:
		LCD_ENTRY_NOSHIFT);
	lcd_clear();
}

void lcd_data(uint8_t data)
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	LCD_OUT |= (1 << LCD_RS);
  bc:	44 9a       	sbi	0x08, 4	; 8
	lcd_out(data);
  be:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
	lcd_out(data << 4);
  c2:	8c 2f       	mov	r24, r28
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
  cc:	85 ef       	ldi	r24, 0xF5	; 245
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_data+0x16>
  d2:	00 00       	nop
	LCD_DELAY_US(LCD_DELAY_US_DATA);
}
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_command>:

void lcd_command(uint8_t data)
{
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
	LCD_OUT &= ~(1 << LCD_RS);
  dc:	44 98       	cbi	0x08, 4	; 8
	lcd_out(data);
  de:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
	lcd_out(data << 4);
  e2:	8c 2f       	mov	r24, r28
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
  ec:	80 ee       	ldi	r24, 0xE0	; 224
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_command+0x16>
	LCD_DELAY_US(LCD_DELAY_US_COMMAND);
}
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_home>:

void lcd_home(void)
{
	lcd_command(LCD_CURSOR_HOME);
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_home+0xa>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_home+0x10>
 106:	00 00       	nop
	LCD_DELAY_MS(LCD_DELAY_MS_HOME);
}
 108:	08 95       	ret

0000010a <lcd_clear>:

void lcd_clear(void)
{
	lcd_command(LCD_CLEAR_DISPLAY);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_clear+0xa>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_clear+0x10>
 11a:	00 00       	nop
	LCD_DELAY_MS(LCD_DELAY_MS_CLEAR);
}
 11c:	08 95       	ret

0000011e <lcd_init>:
	LCD_DIR |= pins;
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	8f 63       	ori	r24, 0x3F	; 63
 122:	87 b9       	out	0x07, r24	; 7
	LCD_OUT &= ~pins;
 124:	88 b1       	in	r24, 0x08	; 8
 126:	80 7c       	andi	r24, 0xC0	; 192
 128:	88 b9       	out	0x08, r24	; 8
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	9a ee       	ldi	r25, 0xEA	; 234
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x10>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x16>
 134:	00 00       	nop
	lcd_out(LCD_SOFT_RESET);
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
 13c:	8f e1       	ldi	r24, 0x1F	; 31
 13e:	9e e4       	ldi	r25, 0x4E	; 78
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x22>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_init+0x28>
 146:	00 00       	nop
	lcd_enable();
 148:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable>
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x32>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x38>
 156:	00 00       	nop
	lcd_enable();
 158:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_enable>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init+0x42>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_init+0x48>
 166:	00 00       	nop
	lcd_out(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT);
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_out>
 16e:	8f e1       	ldi	r24, 0x1F	; 31
 170:	9e e4       	ldi	r25, 0x4E	; 78
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x54>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x5a>
 178:	00 00       	nop
	lcd_command(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT |
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
	lcd_command(LCD_SET_ENTRY | LCD_ENTRY_INCREASE |
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
	lcd_clear();
 18c:	0c 94 85 00 	jmp	0x10a	; 0x10a <lcd_clear>

00000190 <lcd_cursor>:

void lcd_cursor(uint8_t x, uint8_t y)
{
	uint8_t pos = LCD_SET_DDADR + x;
	if(y == 1) { pos += LCD_OFFSET_SECOND_ROW; }
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	19 f0       	breq	.+6      	; 0x19a <lcd_cursor+0xa>
	uint8_t pos = LCD_SET_DDADR + x;
 194:	80 58       	subi	r24, 0x80	; 128
	lcd_command(pos);
 196:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <lcd_command>
	if(y == 1) { pos += LCD_OFFSET_SECOND_ROW; }
 19a:	80 54       	subi	r24, 0x40	; 64
 19c:	fc cf       	rjmp	.-8      	; 0x196 <lcd_cursor+0x6>

0000019e <lcd_string>:
}

void lcd_string(const uint8_t *s)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
	char c;
	for(; (c = *s); ++s) { lcd_data(c); }
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_string+0x12>
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret
	for(; (c = *s); ++s) { lcd_data(c); }
 1b0:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 1b4:	f7 cf       	rjmp	.-18     	; 0x1a4 <lcd_string+0x6>

000001b6 <lcd_custom_char>:

void lcd_custom_char(uint8_t addr, const uint8_t *data)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	8b 01       	movw	r16, r22
	uint8_t i;
	lcd_command(LCD_SET_CGADR | (addr << 0x03));
 1c0:	28 e0       	ldi	r18, 0x08	; 8
 1c2:	82 9f       	mul	r24, r18
 1c4:	c0 01       	movw	r24, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
	for(i = 0; i < 8; ++i) { lcd_data(data[i]); }
 1ce:	e8 01       	movw	r28, r16
 1d0:	08 5f       	subi	r16, 0xF8	; 248
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	89 91       	ld	r24, Y+
 1d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 1da:	c0 17       	cp	r28, r16
 1dc:	d1 07       	cpc	r29, r17
 1de:	d1 f7       	brne	.-12     	; 0x1d4 <lcd_custom_char+0x1e>
	lcd_command(LCD_SET_DDADR);
 1e0:	80 e8       	ldi	r24, 0x80	; 128
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
	lcd_command(LCD_SET_DDADR);
 1ea:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <lcd_command>

000001ee <lcd_string_P>:

#if defined(AVR) && AVR == 1

void lcd_string_P(const uint8_t *s)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
	char c;
	for(; (c = pgm_read_byte(s)); ++s) { lcd_data(c); }
 1f4:	fe 01       	movw	r30, r28
 1f6:	84 91       	lpm	r24, Z
 1f8:	81 11       	cpse	r24, r1
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <lcd_string_P+0x14>
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret
	for(; (c = pgm_read_byte(s)); ++s) { lcd_data(c); }
 202:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	f5 cf       	rjmp	.-22     	; 0x1f4 <lcd_string_P+0x6>

0000020a <lcd_custom_char_P>:

void lcd_custom_char_P(uint8_t addr, const uint8_t *data)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	8b 01       	movw	r16, r22
	uint8_t i;
	lcd_command(LCD_SET_CGADR | (addr << 0x03));
 214:	28 e0       	ldi	r18, 0x08	; 8
 216:	82 9f       	mul	r24, r18
 218:	c0 01       	movw	r24, r0
 21a:	11 24       	eor	r1, r1
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_command>
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	c0 e0       	ldi	r28, 0x00	; 0
	for(i = 0; i < 8; ++i) { lcd_data(pgm_read_byte(data + i)); }
 226:	f8 01       	movw	r30, r16
 228:	ec 0f       	add	r30, r28
 22a:	fd 1f       	adc	r31, r29
 22c:	84 91       	lpm	r24, Z
 22e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 232:	21 96       	adiw	r28, 0x01	; 1
 234:	c8 30       	cpi	r28, 0x08	; 8
 236:	d1 05       	cpc	r29, r1
 238:	b1 f7       	brne	.-20     	; 0x226 <lcd_custom_char_P+0x1c>
	lcd_command(LCD_SET_DDADR);
 23a:	80 e8       	ldi	r24, 0x80	; 128
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
	lcd_command(LCD_SET_DDADR);
 244:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <lcd_command>

00000248 <main>:
	0b00000000
};

int main(void)
{
	lcd_init();
 248:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_init>
	lcd_custom_char(0, chrdata0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	71 e0       	ldi	r23, 0x01	; 1
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_custom_char>

	lcd_data('T');
 256:	84 e5       	ldi	r24, 0x54	; 84
 258:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
	lcd_data('e');
 25c:	85 e6       	ldi	r24, 0x65	; 101
 25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
	lcd_data('s');
 262:	83 e7       	ldi	r24, 0x73	; 115
 264:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
	lcd_data('t');
 268:	84 e7       	ldi	r24, 0x74	; 116
 26a:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>

	lcd_cursor(0, 1);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cursor>
	lcd_string((uint8_t *)"Hello World!");
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_string>

	lcd_cursor(15, 1);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cursor>
	lcd_data(0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>

	while(1)
	{
		
	}
 28c:	ff cf       	rjmp	.-2      	; 0x28c <main+0x44>

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
